version: '3.5'

services:
  #################################### NGINX + OPA ####################################

  nginx:
    image: nginx:1.21.4
    volumes:
      - "./kafka-oauth-strimzi/bundles:/usr/share/nginx/html"
    ports:
      - "80:80"
  opa:
    image: openpolicyagent/opa:0.35.0-rootless
    ports:
      - "8181:8181"
    command:
      - "run"
      - "--server"
      - "--set=decision_logs.console=true"
      - "--set=services.authz.url=http://nginx"
      - "--set=bundles.authz.service=authz"
      - "--set=bundles.authz.resource=bundle.tar.gz"
    depends_on:
      - nginx
  #################################### KAFKA BROKER ####################################
  kafka:
    image: confluentinc/cp-kafka:6.2.1
    build: kafka-oauth-strimzi/kafka/target
    container_name: kafka
    command:
      - /bin/bash
      - /opt/kafka/start_with_hydra.sh

    ports:
      - 9092:9092

      # javaagent debug port
      #- 5005:5005

    environment:

      # Java Debug
      #KAFKA_DEBUG: y
      #DEBUG_SUSPEND_FLAG: y
      #JAVA_DEBUG_PORT: 5005

      #
      # KAFKA Configuration
      #
      LOG_DIR: /home/kafka/logs

      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: CLIENT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CLIENT:SASL_PLAINTEXT
      KAFKA_SASL_ENABLED_MECHANISMS: OAUTHBEARER
      KAFKA_INTER_BROKER_LISTENER_NAME: CLIENT
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: OAUTHBEARER

      KAFKA_LISTENER_NAME_CLIENT_OAUTHBEARER_SASL_JAAS_CONFIG: "org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required;"
      KAFKA_LISTENER_NAME_CLIENT_OAUTHBEARER_SASL_LOGIN_CALLBACK_HANDLER_CLASS: io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler
      KAFKA_LISTENER_NAME_CLIENT_OAUTHBEARER_SASL_SERVER_CALLBACK_HANDLER_CLASS: io.strimzi.kafka.oauth.server.JaasServerOauthValidatorCallbackHandler

      KAFKA_SUPER_USERS: User:kafka-broker

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      #
      # Strimzi OAuth Configuration
      #
      # Authentication config
      OAUTH_CLIENT_ID: "kafka-broker"
      OAUTH_CLIENT_SECRET: "kafka-broker-secret"
      OAUTH_TOKEN_ENDPOINT_URI: "https://${HYDRA_HOST:-hydra}:4444/oauth2/token"

      # Validation config
      OAUTH_VALID_ISSUER_URI: "https://${HYDRA_HOST:-hydra}:4444/"
      OAUTH_JWKS_ENDPOINT_URI: "https://${HYDRA_HOST:-hydra}:4444/.well-known/jwks.json"

      # Hydra JWT tokens don't contain token type claim, therefore type check has to be skipped
      OAUTH_CHECK_ACCESS_TOKEN_TYPE: "false"

      # Truststore config for connecting to secured authorization server
      OAUTH_SSL_TRUSTSTORE_LOCATION: /opt/kafka/config/ca-truststore.p12
      OAUTH_SSL_TRUSTSTORE_PASSWORD: changeit
      OAUTH_SSL_TRUSTSTORE_TYPE: pkcs12

      # Turn off certificate host name check
      # OAUTH_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""

      # For start_with_hydra.sh script to know where hydra is listening
      HYDRA_HOST: ${HYDRA_HOST:-hydra}

      # OPA Authorizer settings
      # Set cache expiry to low value for development in order to see decisions
      KAFKA_OPA_AUTHORIZER_CACHE_EXPIRE_AFTER_SECONDS: 10
      KAFKA_OPA_AUTHORIZER_URL: http://opa:8181/v1/data/kafka/authz/allow
      KAFKA_AUTHORIZER_CLASS_NAME: org.openpolicyagent.kafka.OpaAuthorizer
      CLASSPATH: "/opt/kafka/libs/*"
    volumes:
      - "./kafka-oauth-strimzi/plugin:/plugin"
    depends_on:
      - zookeeper
      - opa
    restart: on-failure

  zookeeper:
    image: strimzi/example-zookeeper
    build: kafka-oauth-strimzi/zookeeper/target
    container_name: zookeeper
    ports:
      - 2181:2181
    environment:
      - LOG_DIR=/home/kafka/logs
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOOKEEPER_CLIENT_PORT=2181